<?phpApp::uses('AppController', 'Controller');/** * CourseMappings Controller * * @property CourseMapping $CourseMapping * @property PaginatorComponent $Paginator * @property FlashComponent $Flash * @property SessionComponent $Session */class CourseMappingsController extends AppController {/** * Components * * @var array */	public $components = array('Paginator', 'Flash', 'Session');	public $uses = array("CourseMapping", "Batch", "Program", "MonthYear", "Student","CourseStudentMapping","caes","Course");/** * index method * * @return void */	public function index() {				$academics = $this->Program->Academic->find('list',array('order' => array('Academic.academic_name ASC')));		$programs = $this->Program->find('list',array('order' => array('Program.program_name ASC')));		$batches = $this->Batch->find('list', array('fields' => array('Batch.batch_period'),'order' => array('Batch.batch_to DESC')));		$monthyears = $this->MonthYear->getAllMonthYears();		$this->set(compact('academics','programs','batches','monthyears'));	}	public function search_list() { 		$wConditon = "";			if($_REQUEST['Program']){ 			$wConditon = " AND PG.id = ". $_REQUEST['Program'];		}else{			//$wConditon ="'Program.academic_id'=> ".$_REQUEST['Academic']."";						$getAllProgramId = $this->Program->find('list',array('conditions' => array('Program.academic_id'=> $_REQUEST['Academic']),'fields' => array('Program.id')));			$diffArrayVal = "";			foreach($getAllProgramId as $key=>$val){				$diffArrayVal .= $val.",";			}			$diffArrayVal = rtrim($diffArrayVal,",");			if($diffArrayVal){				 $wConditon = " AND PG.id IN (".$diffArrayVal.")";			}		} //CM.indicator != 1		 $results = $this->CourseMapping->query("SELECT PG.id,PG.program_name, CM.indicator,SUM(if(CM.indicator = '0' AND CM.batch_id = '".$_REQUEST['Batch']."', 1, 0)) AS subjectNo, PG.semester_id AS semesterNo 				FROM programs AS PG LEFT JOIN course_mappings AS CM ON PG.id = CM.program_id				WHERE 1 = 1 ".$wConditon." GROUP BY PG.program_name ORDER BY PG.program_name ASC");		/*$results = $this->Program->find('first',						array('fields' => array('*, count(CourseMapping.semester_id) AS subjectNo, max(Program.semester_id) AS semesterNo'),'conditions' => array($wConditon,'Program.batch_id'=> $_REQUEST['Batch'],'CourseMapping.indicator != '=> 1),			'group' => 'CourseMapping.program_id',			'order' => 'CourseMapping.program_id'			), 			array('recursive' => 2)						);*/		$this->set('BatchId', $_REQUEST['Batch']);				$this->set('courseMappings', $results);		$this->layout=false;		}/** * view method * * @throws NotFoundException * @param string $id * @return void */	public function view($id = null) {		if (!$this->CourseMapping->exists($id)) {			throw new NotFoundException(__('Invalid course mapping'));		}		$options = array('conditions' => array('CourseMapping.' . $this->CourseMapping->primaryKey => $id));		$this->set('courseMapping', $this->CourseMapping->find('first', $options));	}/** * add method * * @return void */	public function add() { 		//Initially we are get the all the record from course mapping table 		//Get all the record based on batch, program, semester		$options = array('conditions' => array('CourseMapping.batch_id'=> $this->request->data['batch_id'],'CourseMapping.program_id'=> $this->request->data['program_id'],'CourseMapping.semester_id'=> $this->request->data['semester']), 'fields' => array('CourseMapping.course_id'));		$ExistingRecordQuery = $this->CourseMapping->find('list', $options);		//pr($ExistingRecordQuery);		$existingRecord = "";		foreach($ExistingRecordQuery  as $key => $val){			$existingRecord .= $val.",";		}		$existingRecord = rtrim($existingRecord,",");		$newArrayRecord = ""; 		for($i=1; $i<=$this->request->data['SemId'.$_REQUEST['semester']];$i++) { //echo "<br/>!!".$this->request->data['Semester'.$_REQUEST['semester'].'CourseId'.$i];		if(isset($this->request->data['Semester'.$_REQUEST['semester'].'CourseId'.$i])){ 			for($j=0; $j<count($this->request->data['Semester'.$_REQUEST['semester'].'CourseId'.$i]);$j++) {				if($this->request->data['Semester'.$_REQUEST['semester'].'CourseId'.$i][$j]){										//pr($this->request->data['Mandatory'.$_REQUEST['semester'].'Course'.$i]);					//$mandatory=0;					$data = array();					$data['CourseMapping']['batch_id']			= $this->request->data['batch_id'];					$data['CourseMapping']['program_id'] 		= $this->request->data['program_id'];					$data['CourseMapping']['indicator'] 		= 0;					$data['CourseMapping']['month_year_id']		= $this->request->data['MonthYear'];										$data['CourseMapping']['course_number'] 	= $this->request->data['Course'.$_REQUEST['semester'].'Number'.$i];					$data['CourseMapping']['course_id'] 		= $this->request->data['Semester'.$_REQUEST['semester'].'CourseId'.$i][$j];					$data['CourseMapping']['course_mode_id'] 	= $this->request->data['Semester'.$_REQUEST['semester'].'CT'.$i];					$data['CourseMapping']['semester_id'] 		= $this->request->data['semester'];										/* if($this->request->data['Mandatory'.$_REQUEST['semester'].'Course'.$i]==1 || 							$this->request->data['Mandatory'.$_REQUEST['semester'].'Course'.$i]=="on") $mandatory=1;					$data['CourseMapping']['mandatory'] 		= $mandatory; */										$newArrayRecord .= $data['CourseMapping']['course_id'].",";					if($this->request->data['Semester'.$_REQUEST['semester'].'Mode'.$i] == 'A'){ //Course Mapping record Add						$options2 = array('conditions' => array('CourseMapping.batch_id'=> $this->request->data['batch_id'],'CourseMapping.program_id'=> $this->request->data['program_id'],'CourseMapping.semester_id'=> $this->request->data['semester'],'CourseMapping.course_id'=>$data['CourseMapping']['course_id']), 'fields' => array('CourseMapping.id'),'recursive'=>0);						$ExistingRecordQuery2 = $this->CourseMapping->find('first', $options2);												if($ExistingRecordQuery2){							$data['CourseMapping']['modified_by'] 	= $this->Auth->user('id');							$data['CourseMapping']['id'] 				= $ExistingRecordQuery2['CourseMapping']['id'];						}else{							$data['CourseMapping']['created_by'] 		= $this->Auth->user('id');							$this->CourseMapping->create();						}					}else if($this->request->data['Semester'.$_REQUEST['semester'].'Mode'.$i] == 'E'){	//Course Mapping record Edit												$key = array_search($data['CourseMapping']['course_id'] , $ExistingRecordQuery); 												if(empty($key)){							$data['CourseMapping']['created_by'] = $this->Auth->user('id');							$this->CourseMapping->create();						}else{										$options2 = array('conditions' => array('CourseMapping.batch_id'=> $this->request->data['batch_id'],'CourseMapping.program_id'=> $this->request->data['program_id'],'CourseMapping.semester_id'=> $this->request->data['semester'], 'CourseMapping.id'=>$key), 'fields' => array('CourseMapping.course_mode_id'));							$ExistingRecordQuery2 = $this->CourseMapping->find('list', $options2);														if($ExistingRecordQuery2){								$data['CourseMapping']['indicator'] = 0;								$data['CourseMapping']['modified_by'] 	= $this->Auth->user('id');								$data['CourseMapping']['id'] 			= $key; 							}							}											}					$this->CourseMapping->save($data);				}			}} 		} 		$newArrayRecord = rtrim($newArrayRecord,",");		$newArrayRecord = explode(",",$newArrayRecord);		if($newArrayRecord){			$diffArray = array_diff($ExistingRecordQuery,$newArrayRecord);			if($diffArray){$diffArrayVal = "";				foreach($diffArray  as $key => $val){					$diffArrayVal .= $val.",";				}				 $diffArrayVal = rtrim($diffArrayVal,",");				$courseMapping = $this->CourseMapping->query("UPDATE course_mappings set indicator = 1 						WHERE batch_id = '".$this->request->data['batch_id']."' AND program_id = '".$this->request->data['program_id']."' AND semester_id = '".$this->request->data['semester']."' AND course_id IN ($diffArrayVal) ");			}		}	}	public function findNoOfSemesters($batchId = null,$programId = null) {				$options = array('conditions' => array('Program.id'=> $programId), 'fields' => array('Program.semester_id'));		$semesters = $this->CourseMapping->Program->find('list', $options);				$programSemesters = $semesters[$programId];					$this->set('batchId', $batchId);		//$this->set('semesters', $semesters);		$this->set('programId', $programId);		$this->set(compact('semesters', 'programSemesters', 'courses'));		$arrCourses=array();			$courseMapping = $this->CourseMapping->query("SELECT CM.id,  CM.program_id, CM.course_number, CM.course_mode_id, 					CM.semester_id, CM.month_year_id, GROUP_CONCAT(DISTINCT(CM.course_id)) AS course, 					CAES.id AS CAES_ID, CModes.course_mode, CSM.id AS CSM_ID  FROM course_mappings CM 	LEFT JOIN caes AS CAES 		ON CM.id = CAES.course_mapping_id	LEFT JOIN course_modes AS CModes  		ON CM.course_mode_id = CModes.id	LEFT JOIN course_student_mappings AS CSM 		ON CM.id = CSM.course_mapping_id						WHERE CM.program_id = '".$programId."' AND CM.batch_id = '".$batchId."' AND CM.indicator=0 			GROUP BY CM.program_id, CM.semester_id, CM.course_number ORDER BY CM.semester_id, CM.course_number");						for ($i=0; $i<count($courseMapping); $i++) {				$arr = $courseMapping[$i];								$this->request->data['CourseMapping']['course'] = $courseMapping[$i][0]['course'];				$this->request->data['CourseMapping']['id'] = $courseMapping[$i]['CM']['id'];				$this->request->data['CourseMapping']['program_id'] = $courseMapping[$i]['CM']['program_id'];				$this->request->data['CourseMapping']['course_number'] = $courseMapping[$i]['CM']['course_number'];				$this->request->data['CourseMapping']['course_mode_id'] = $courseMapping[$i]['CM']['course_mode_id'];				$this->request->data['CourseMapping']['course_mode_value'] = $courseMapping[$i]['CModes']['course_mode'];				//$this->request->data['CourseMapping']['mandatory'] = $courseMapping[$i]['CM']['mandatory'];				$this->request->data['CourseMapping']['semester_id'] = $courseMapping[$i]['CM']['semester_id'];				$this->request->data['CourseMapping']['month_year_id'] = $courseMapping[$i]['CM']['month_year_id'];				$this->request->data['CourseMapping']['CAES_ID'] = $courseMapping[$i]['CAES']['CAES_ID'];				$this->request->data['CourseMapping']['CSM_ID'] = $courseMapping[$i]['CSM']['CSM_ID'];								array_push($arrCourses, reset($this->request->data));			}						$program_id = $programId;			for ($i=1; $i<=$programSemesters; $i++) {				foreach($arrCourses as $key => $value) {					if(isset($value['semester_id'])) {						if($value['semester_id']==$i) {							$CAES_ID = ""; $CSM_ID = "";							if($value['CAES_ID']){								$CAES_ID = $value['CAES_ID'];							}							if($value['CSM_ID']){								$CSM_ID = $value['CSM_ID'];							}							//if(strstr($value['course_mode_value'], 'Electives', true)){								$arr[$i][$value['course_number']] = array(										'course_mode_id' => $value['course_mode_id'],										//'mandatory' => $value['mandatory'],										'course_mode_value' => $value['course_mode_value'],										'course_id' => explode(",",$value['course']),										'CAES_ID' => $CAES_ID,										'MONTH_YEAR'=>$value['month_year_id'],										'CSM_ID' => $CSM_ID,										'course_mapping_id' => $value['id'],										'course_number' => $value['course_number']								);							/*}else{								$arr[$i][$value['course_number']] = array(										'course_mode_id' => $value['course_mode_id'],										'course_mode_value' => $value['course_mode_value'],										'course_id' => $value['course'],										'CAES_ID' => $CAES_ID,										'CSM_ID' => $CSM_ID,										'course_mapping_id' => $value['id'],										'course_number' => $value['course_number']								);							}*/						}					}				}			}			$this->set(compact('arr'));			$course_mode = $this->CourseMapping->CourseMode->find('list');			//$allCourses = $this->CourseMapping->Course->find('list');						$allCourses = $this->CourseMapping->Course->find('list',array('fields' => array(/*'Course.course_name',*/'Course.id','Course.course_info')));									$mYears = $this->MonthYear->find('all', array(					'fields' => array('MonthYear.id','MonthYear.year','MonthYear.month_id','Month.month_name'),					'recursive' => 0			));			$monthYears=array();			foreach ($mYears as $key => $value) {				$monthYears[$value['MonthYear']['id']]=$value['Month']['month_name']."-".$value['MonthYear']['year'];			}			$this->set(compact('numSemesters', 'arr', 'program_id', 'course_mode', 'allCourses','monthYears'));										$this->layout=false;	}/** * edit method * * @throws NotFoundException * @param string $id * @return void */	public function edit($id = null) {		if($id){			$data['CourseMapping']['indicator'] = 1;			$data['CourseMapping']['modified_by'] 		= $this->Auth->user('id');			$data['CourseMapping']['id'] 				= $id;			$this->CourseMapping->save($data);						$this->CourseStudentMapping->query("update course_student_mappings set indicator=1 where course_mapping_id=".$id);		}			}	public function getCourseInfo($Id){		$options = array('conditions' => array('CourseMapping.id'=> $Id),				'contain'=>array(					'Course'=>array('fields'=>array('Course.id','Course.course_code','Course.course_name','Course.common_code'),					)				),				'recursive'=>0);		$courseInfo = $this->CourseMapping->find('first', $options);		if($courseInfo){			return $courseInfo;		}else{return "";}	}		/*public function update() {		//foreach ($cmResult as $cm_id => $course_id) {			$this->CourseStudentMapping->query("delete from course_student_mappings where course_mapping_id=943");		//}		echo "Completed successfully";		$this->autoRender=false;	}*/		public function courseSearch() {		$academics = $this->Student->Academic->find('list');		$batches = $this->Student->Batch->find('list', array('fields' => array('Batch.batch_period')));		$this->set(compact('batches', 'academics'));		 	}		public function courses($batchId, $academicId, $programId, $printMode) {		//echo $batchId." ".$academicId." ".$programId;			$results = $this->CourseMapping->find('all', array(				'conditions'=>array('CourseMapping.indicator'=>0, 'CourseMapping.batch_id'=>$batchId,						'CourseMapping.program_id'=>$programId				),				'fields'=>array('CourseMapping.id', 'CourseMapping.semester_id'),				'recursive'=>0,				'contain'=>false		));					$cmArray = array();					foreach ($results as $key => $value) {			$cmArray[$value['CourseMapping']['id']] = $value['CourseMapping']['semester_id'];		}		//	pr($cmArray);		$res = $this->CourseMapping->getCourseMarks($cmArray);		//	pr($res);		$resArray = $this->group_assoc($res, 'semester_id');		//pr($resArray);		if ($printMode == "-") {			$this->set('courses', $resArray);			$this->set('batchId', $batchId);			$this->set('programId', $programId);			$this->set('academicId', $academicId);			$this->layout = false;		}		else if ($printMode == "Excel") {			$this->downloadCoursesAsExcel($resArray, $batchId, $programId);		}	}		public function downloadCoursesAsExcel($resArray, $batchId, $programId) {		$phpExcel = new PHPExcel();		$phpExcel->setActiveSheetIndex(0);		$sheet = $phpExcel->getActiveSheet();		$sheet->getRowDimension('1')->setRowHeight('18');		$sheet->setTitle("Students_Data");				$sheet->setCellValue("A1", "SEMESTER");		$sheet->setCellValue("B1", "COURSE CODE");		$sheet->setCellValue("C1", "COURSE NAME");		$sheet->setCellValue("D1", "COURSE TYPE");		$sheet->setCellValue("E1", "MIN CAE PASS PERCENT");		$sheet->setCellValue("F1", "MAX CAE MARK");		$sheet->setCellValue("G1", "MIN ESE PASS PERCENT");		$sheet->setCellValue("H1", "MAX ESE MARK");		$sheet->setCellValue("I1", "TOTAL MIN PASS PERCENT");		$sheet->setCellValue("J1", "COURSE MAX MARKS");		$sheet->setCellValue("K1", "MAX QP MARK");				$i=2;		foreach ($resArray as $semester => $array) {			foreach ($array as $key => $value) {				$sheet->getRowDimension($i)->setRowHeight('18');				$sheet->setCellValue('A'.$i, $semester);				$sheet->setCellValue('B'.$i, $value['course_code']);				$sheet->setCellValue('C'.$i, $value['course_name']);				$sheet->setCellValue('D'.$i, $value['course_type_id']);				$sheet->setCellValue('E'.$i, $value['min_cae_mark']);				$sheet->setCellValue('F'.$i, $value['max_cae_mark']);				$sheet->setCellValue('G'.$i, $value['min_ese_mark']);				$sheet->setCellValue('H'.$i, $value['max_ese_mark']);				$sheet->setCellValue('I'.$i, $value['total_min_pass']);				$sheet->setCellValue('J'.$i, $value['course_max_marks']);				$sheet->setCellValue('K'.$i, $value['max_ese_qp_mark']);				$i++;			}		}				$pgmDetails = $this->Program->getProgram($programId);		$download_filename="Courses_".$this->Batch->getBatch($batchId)."_".$pgmDetails['academic_short_code']."_".$pgmDetails['short_code']."_".date('d-M-Y h:i:s');		header("Content-Type: application/vnd.ms-excel");		header("Content-Disposition: attachment; filename=\"$download_filename.xls\"");		header("Cache-Control: max-age=0");		$objWriter = PHPExcel_IOFactory::createWriter($phpExcel, "Excel5");		$objWriter->save("php://output");		 exit;	}}